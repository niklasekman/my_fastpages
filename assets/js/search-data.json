{
  
    
        "post0": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://niklasekman.github.io/my_fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://niklasekman.github.io/my_fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Engine knock detection AI part 4/5",
            "content": "Method . Setup . !curl -s https://course.fast.ai/setup/colab | bash . Updating fastai... Done. . from google.colab import drive drive.mount(&#39;/content/drive&#39;) . Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(&#34;/content/drive&#34;, force_remount=True). . . from fastai.vision import * . path = Path(&#39;/content/drive/My Drive/Colab Notebooks/fast.ai/KnockKnock/data&#39;) . defaults.device = torch.device(&#39;cpu&#39;) . Loading the previously trained model . classes = [&#39;knocking&#39;,&#39;normal&#39;] . data = ImageDataBunch.single_from_classes(path, classes, size=224).normalize(imagenet_stats) learn = create_cnn(data,models.resnet34) learn.load(&#39;stage-2&#39;) . Learner(data=ImageDataBunch; Train: LabelList (0 items) x: ImageList y: CategoryList Path: /content/drive/My Drive/Colab Notebooks/fast.ai/KnockKnock/data; Valid: LabelList (0 items) x: ImageList y: CategoryList Path: /content/drive/My Drive/Colab Notebooks/fast.ai/KnockKnock/data; Test: None, model=Sequential( (0): Sequential( (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False) (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (2): ReLU(inplace) (3): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False) (4): Sequential( (0): BasicBlock( (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace) (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) (1): BasicBlock( (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace) (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) (2): BasicBlock( (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace) (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (5): Sequential( (0): BasicBlock( (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False) (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace) (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (downsample): Sequential( (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False) (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (1): BasicBlock( (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace) (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) (2): BasicBlock( (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace) (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) (3): BasicBlock( (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace) (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (6): Sequential( (0): BasicBlock( (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (downsample): Sequential( (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False) (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (1): BasicBlock( (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) (2): BasicBlock( (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) (3): BasicBlock( (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) (4): BasicBlock( (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) (5): BasicBlock( (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (7): Sequential( (0): BasicBlock( (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False) (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace) (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (downsample): Sequential( (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False) (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (1): BasicBlock( (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace) (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) (2): BasicBlock( (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace) (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) ) (1): Sequential( (0): AdaptiveConcatPool2d( (ap): AdaptiveAvgPool2d(output_size=1) (mp): AdaptiveMaxPool2d(output_size=1) ) (1): Flatten() (2): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (3): Dropout(p=0.25) (4): Linear(in_features=1024, out_features=512, bias=True) (5): ReLU(inplace) (6): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (7): Dropout(p=0.5) (8): Linear(in_features=512, out_features=2, bias=True) ) ), opt_func=functools.partial(&lt;class &#39;torch.optim.adam.Adam&#39;&gt;, betas=(0.9, 0.99)), loss_func=FlattenedLoss of CrossEntropyLoss(), metrics=[], true_wd=True, bn_wd=True, wd=0.01, train_bn=True, path=PosixPath(&#39;/content/drive/My Drive/Colab Notebooks/fast.ai/KnockKnock/data&#39;), model_dir=&#39;models&#39;, callback_fns=[functools.partial(&lt;class &#39;fastai.basic_train.Recorder&#39;&gt;, add_time=True, silent=False)], callbacks=[], layer_groups=[Sequential( (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False) (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (2): ReLU(inplace) (3): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False) (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (6): ReLU(inplace) (7): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (8): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (9): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (10): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (11): ReLU(inplace) (12): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (14): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (15): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (16): ReLU(inplace) (17): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (18): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (19): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False) (20): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (21): ReLU(inplace) (22): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (23): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (24): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False) (25): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (26): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (27): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (28): ReLU(inplace) (29): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (30): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (31): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (32): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (33): ReLU(inplace) (34): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (35): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (36): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (37): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (38): ReLU(inplace) (39): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (40): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ), Sequential( (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False) (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (2): ReLU(inplace) (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (5): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False) (6): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (7): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (8): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (9): ReLU(inplace) (10): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (11): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (13): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (14): ReLU(inplace) (15): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (16): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (19): ReLU(inplace) (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (22): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (23): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (24): ReLU(inplace) (25): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (26): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (27): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (28): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (29): ReLU(inplace) (30): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (31): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (32): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False) (33): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (34): ReLU(inplace) (35): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (36): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (37): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False) (38): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (39): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (40): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (41): ReLU(inplace) (42): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (43): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (44): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (45): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (46): ReLU(inplace) (47): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (48): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ), Sequential( (0): AdaptiveAvgPool2d(output_size=1) (1): AdaptiveMaxPool2d(output_size=1) (2): Flatten() (3): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (4): Dropout(p=0.25) (5): Linear(in_features=1024, out_features=512, bias=True) (6): ReLU(inplace) (7): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (8): Dropout(p=0.5) (9): Linear(in_features=512, out_features=2, bias=True) )], add_time=True, silent=False, cb_fns_registered=False) . . Using the model for prediciton . Loading a video file . !pip install moviepy . Requirement already satisfied: moviepy in /usr/local/lib/python3.6/dist-packages (0.2.3.5) Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from moviepy) (1.16.5) Requirement already satisfied: decorator&lt;5.0,&gt;=4.0.2 in /usr/local/lib/python3.6/dist-packages (from moviepy) (4.4.0) Requirement already satisfied: tqdm&lt;5.0,&gt;=4.11.2 in /usr/local/lib/python3.6/dist-packages (from moviepy) (4.28.1) Requirement already satisfied: imageio&lt;3.0,&gt;=2.1.2 in /usr/local/lib/python3.6/dist-packages (from moviepy) (2.4.1) Requirement already satisfied: pillow in /usr/local/lib/python3.6/dist-packages (from imageio&lt;3.0,&gt;=2.1.2-&gt;moviepy) (4.3.0) Requirement already satisfied: olefile in /usr/local/lib/python3.6/dist-packages (from pillow-&gt;imageio&lt;3.0,&gt;=2.1.2-&gt;moviepy) (0.46) . Extracting 2 seconds from the video file for analysis. . project_path = &#39;/content/drive/My Drive/Colab Notebooks/fast.ai/KnockKnock&#39; mov_filename = &#39;IMG_3414.MOV&#39; import moviepy.editor as mp clip = mp.VideoFileClip(project_path + &#39;/&#39; + mov_filename).subclip(4,6); clip . &lt;moviepy.video.io.VideoFileClip.VideoFileClip at 0x7f6b7acb6a58&gt; . clip.ipython_display(width=360) . Output hidden; open in https://colab.research.google.com to view. . . Generating a spectrogram . Preparing the audio track from the video for librosa. . sr = clip.audio.fps y = clip.audio.to_soundarray() y = y[...,0:1:1].flatten() # Take one channel, transform rows to columns, 1D . The following is the same process which was done when creating the training dataset. . import librosa . D = librosa.stft(y) . D_harmonic, D_percussive = librosa.decompose.hpss(D) . rp = np.max(np.abs(D)) . import matplotlib.pyplot as plt import librosa.display side_px=256 dpi=150 plot = plt.figure(figsize=(side_px/dpi, side_px/dpi)) CQT = librosa.amplitude_to_db(np.abs(librosa.cqt(librosa.istft(D_percussive), sr=sr)), ref=np.max) p=librosa.display.specshow(CQT,x_axis=None,y_axis=None) plt.axis(&#39;off&#39;) . (0.0, 173.0, 0.0, 84.0) . The image is actually a matplotlib figure. The predict function of the fastai learner expects to be given a tensor to work with. Could be that the conversion had been easier if the spectrogram was saved out to a file first and then loaded from disk. The idea is to deploy the model later on a web server and it&#39;s best to avoid unnecessary disk access for temporary files. . type(plot) . matplotlib.figure.Figure . A little googling turned up a short tutorial on turning a figure into a PIL RGBA image. The idea being that the PIL image could then be converted to a tensor. The original URL in the comment below is now broken but as luck would have it the wayback machine has a snapshot of it here. . !pip install Pillow . Requirement already satisfied: Pillow in /usr/local/lib/python3.6/dist-packages (4.3.0) Requirement already satisfied: olefile in /usr/local/lib/python3.6/dist-packages (from Pillow) (0.46) . def fig2data ( fig ): &quot;&quot;&quot; @brief Convert a Matplotlib figure to a 4D numpy array with RGBA channels and return it @param fig a matplotlib figure @return a numpy 3D array of RGBA values &quot;&quot;&quot; # draw the renderer fig.canvas.draw ( ) # Get the RGBA buffer from the figure w,h = fig.canvas.get_width_height() buf = np.fromstring ( fig.canvas.tostring_argb(), dtype=np.uint8 ) buf.shape = ( w, h,4 ) # canvas.tostring_argb give pixmap in ARGB mode. Roll the ALPHA channel to have it in RGBA mode buf = np.roll ( buf, 3, axis = 2 ) return buf . from PIL import Image as pil_Image # http://www.icare.univ-lille1.fr/tutorials/convert_a_matplotlib_figure def fig2img ( fig ): &quot;&quot;&quot; @brief Convert a Matplotlib figure to a PIL Image in RGBA format and return it @param fig a matplotlib figure @return a Python Imaging Library ( PIL ) image &quot;&quot;&quot; # put the figure pixmap into a numpy array buf = fig2data ( fig ) w, h, d = buf.shape return pil_Image.frombytes( &quot;RGBA&quot;, ( w ,h ), buf.tostring( ) ) . Converting the figure to an image . im = fig2img(plot) . im . and turning the image into a tensor. . from PIL import ImageMath im_float = ImageMath.eval(&quot;convert(a,&#39;F&#39;)&quot;, a=im) im_tensor = pil2tensor(im_float, np.float32) . im_fastai = Image(px=im_tensor) . Predicting the state of the engine . Finally the tensor can be given to fastai. The model seems to think that the engine runs normally. . pred_class,pred_idx,outputs = learn.predict(im_fastai) pred_class . Category normal .",
            "url": "https://niklasekman.github.io/my_fastpages/2019/09/16/Test_model_commented.html",
            "relUrl": "/2019/09/16/Test_model_commented.html",
            "date": " • Sep 16, 2019"
        }
        
    
  
    
        ,"post3": {
            "title": "Engine knock detection AI part 3/5",
            "content": "Background . With the training dataset created the model can be trained. This is copying almost verbatim from the second lesson in Practical Deep Learning for Coders, found at the github repo for the third installment of the course. The steps are described quite well in the linked notebook. . Method . Update fast.ai library . !curl -s https://course.fast.ai/setup/colab | bash . Updating fastai... Done. . Connect to google drive . from google.colab import drive drive.mount(&#39;/content/drive&#39;) . Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&amp;redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&amp;scope=email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdocs.test%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.photos.readonly%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fpeopleapi.readonly&amp;response_type=code Enter your authorization code: ·········· Mounted at /content/drive . . Import fast.ai . from fastai.vision import * . Define classes . classes = [&#39;knocking&#39;,&#39;normal&#39;] . Set path to working directory . path = Path(&#39;/content/drive/My Drive/Colab Notebooks/fast.ai/KnockKnock/data&#39;) . Validate image files . for c in classes: print(c) verify_images(path/c) . Define data object . np.random.seed(42) data = ImageDataBunch.from_folder(path, train=&quot;.&quot;, valid_pct=0.2, size=224, num_workers=4).normalize(imagenet_stats) . Verify data classes . data.classes . [&#39;knocking&#39;, &#39;normal&#39;] . Display images from dataset . As demonstrated by these images the knocking displays as vertical spikes in the middle of the spectrum. Some spectrograms for non knocking engines show rythmic components in the lower frequencies (top row middle). It will be interesting how well the model will be able to distinguish from these. . data.show_batch(rows=3, figsize=(7,8)) . Show image classes and counts . data.classes, data.c, len(data.train_ds), len(data.valid_ds) . ([&#39;knocking&#39;, &#39;normal&#39;], 2, 349, 87) . Fetch resnet34 model . learn = cnn_learner(data, models.resnet34, metrics=error_rate) . Downloading: &#34;https://download.pytorch.org/models/resnet34-333f7ec4.pth&#34; to /root/.cache/torch/checkpoints/resnet34-333f7ec4.pth 100%|██████████| 87306240/87306240 [00:00&lt;00:00, 114748481.59it/s] . Train model . learn.fit_one_cycle(4) . epoch train_loss valid_loss error_rate time . 0 | 0.812924 | 0.703951 | 0.425287 | 00:07 | . 1 | 0.695543 | 0.604884 | 0.321839 | 00:04 | . 2 | 0.568838 | 0.543995 | 0.241379 | 00:04 | . 3 | 0.474682 | 0.468180 | 0.229885 | 00:04 | . Save model . learn.save(&#39;stage-1&#39;) . Unfreeze top layers . learn.unfreeze() . Find learning rate . learn.lr_find() . LR Finder is complete, type {learner_name}.recorder.plot() to see the graph. . Plot learning rate . # learn.lr_find(start_lr=1e-5, end_lr=1e-1) learn.recorder.plot() . Retrain top layers . learn.fit_one_cycle(2, max_lr=slice(4e-6,4e-4)) . epoch train_loss valid_loss error_rate time . 0 | 0.018658 | 0.468953 | 0.195402 | 00:05 | . 1 | 0.013044 | 0.466273 | 0.172414 | 00:05 | . Save model . learn.save(&#39;stage-2&#39;) . Interpret model . Load model . learn.load(&#39;stage-2&#39;); . Create interpreation from learner . interp = ClassificationInterpretation.from_learner(learn) . Plot confusion matrix . The confusion matrix shows that the model is quite confident in predicting wether the engine is knocking or not. Only once did it think that an engine ran normally when it was in fact knocking. This case could be seen as the more harmful on. . interp.plot_confusion_matrix() . Plot top losses . Looking at the cases where the model was the most unsure also gives the impression that it&#39;s quite good. The top row would be hard for me to classify correctly based on the spectrograms. Looking closely at the third one (top right) you can suspect somehing is going on with the vertical lines in the top middle of the image. . losses,idxs = interp.top_losses(10) len(data.valid_ds)==len(losses)==len(idxs) interp.plot_top_losses(9) . Show audiofile players for top losses . Listening to the audio for the previously mentioned third spectrogram (knocking/0042_1.wav below) it&#39;s pretty clear that the engine isn&#39;t running well. . import IPython.display as ipd import os . for img_path in data.valid_ds.items[idxs]: filepath, extension = os.path.splitext(img_path) audio_slice_path = filepath + &#39;.wav&#39; print(filepath) ipd.display(ipd.Audio(audio_slice_path)) . /content/drive/My Drive/Colab Notebooks/fast.ai/KnockKnock/data/normal/0046_4 . Your browser does not support the audio element. /content/drive/My Drive/Colab Notebooks/fast.ai/KnockKnock/data/normal/0044_3 . Your browser does not support the audio element. /content/drive/My Drive/Colab Notebooks/fast.ai/KnockKnock/data/knocking/0042_1 . Your browser does not support the audio element. /content/drive/My Drive/Colab Notebooks/fast.ai/KnockKnock/data/normal/0012_4 . Your browser does not support the audio element. /content/drive/My Drive/Colab Notebooks/fast.ai/KnockKnock/data/knocking/0002_1 . Your browser does not support the audio element. /content/drive/My Drive/Colab Notebooks/fast.ai/KnockKnock/data/normal/0042_2 . Your browser does not support the audio element. /content/drive/My Drive/Colab Notebooks/fast.ai/KnockKnock/data/knocking/0016_2 . Your browser does not support the audio element. /content/drive/My Drive/Colab Notebooks/fast.ai/KnockKnock/data/knocking/0002_0 . Your browser does not support the audio element. /content/drive/My Drive/Colab Notebooks/fast.ai/KnockKnock/data/knocking/0035_1 . Your browser does not support the audio element. /content/drive/My Drive/Colab Notebooks/fast.ai/KnockKnock/data/normal/0032_2 . Your browser does not support the audio element. Export model . learn.export() .",
            "url": "https://niklasekman.github.io/my_fastpages/2019/09/15/Train_model_commented.html",
            "relUrl": "/2019/09/15/Train_model_commented.html",
            "date": " • Sep 15, 2019"
        }
        
    
  
    
        ,"post4": {
            "title": "Engine knock detection AI part 2/5",
            "content": "Setup . Basics . Since this ran on Google Colab and the audio files are in a Drive folder, Google Drive is first mounted. . from google.colab import drive drive.mount(&#39;/content/gdrive&#39;, force_remount=True) root_dir = &quot;/content/gdrive/My Drive/&quot; base_dir = root_dir + &#39;Colab Notebooks/fast.ai/KnockKnock/data/&#39; # /content/gdrive/My Drive/Colab Notebooks/fast.ai/data/ . Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&amp;redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&amp;scope=email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdocs.test%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.photos.readonly%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fpeopleapi.readonly&amp;response_type=code Enter your authorization code: ·········· Mounted at /content/gdrive . . Importing the needed modules. Librosa is used for spectral decomposition. . from __future__ import print_function import numpy as np import matplotlib.pyplot as plt import librosa import librosa.display import IPython.display as ipd . Selecting an audiofile to experiment on. . audiofile_path = base_dir+&#39;knocking/0005.wav&#39; . Loading the audiofile . Load two seconds of audio from the specified file. The load function returns both the data, y, and information on the sample rate, sr. . y, sr = librosa.load(audiofile_path, duration=2, offset=0) . Pre-processing audio . Calculate the Short-time Fourier transform using the stft function and perform Median-filtering harmonic percussive source separation with the decompose.hpss function. . Sounds real fancy but the gist of it is that the latter function attempts to split the audio into harmonic and percussive elements. As the sound one is listening for when determining if an engine is knocking is more of a percussive or transient kind, this will make it easier to train the classifier model. . D = librosa.stft(y) D_harmonic, D_percussive = librosa.decompose.hpss(D) . Examining results . Plot the spectrograms of the original, harmonic and percussive content. Even though the knocking is visible in the full spectrogram it is a lot clearer in the percussive one. . # Pre-compute a global reference power from the input spectrum rp = np.max(np.abs(D)) plt.figure(figsize=(12, 8)) plt.subplot(3, 1, 1) librosa.display.specshow(librosa.amplitude_to_db(np.abs(D), ref=rp), y_axis=&#39;log&#39;) plt.colorbar() plt.title(&#39;Full spectrogram&#39;) plt.subplot(3, 1, 2) librosa.display.specshow(librosa.amplitude_to_db(np.abs(D_harmonic), ref=rp), y_axis=&#39;log&#39;) plt.colorbar() plt.title(&#39;Harmonic spectrogram&#39;) plt.subplot(3, 1, 3) librosa.display.specshow(librosa.amplitude_to_db(np.abs(D_percussive), ref=rp), y_axis=&#39;log&#39;, x_axis=&#39;time&#39;) plt.colorbar() plt.title(&#39;Percussive spectrogram&#39;) plt.tight_layout() . . It is possible to run an inverse fourier tranform on the harmonic and percussive content in order to hear the difference. . First up is the original sound. . ipd.Audio(y,rate=sr) . Your browser does not support the audio element. Next is the harmonic content. . ipd.Audio(librosa.istft(D_harmonic),rate=sr) . Your browser does not support the audio element. And lastly the percussive. The knocking is quite pronounced. . ipd.Audio(librosa.istft(D_percussive),rate=sr) . Your browser does not support the audio element. Preparing plots for output . The images used to train a classifier should ideally be square and relatively small. The following documents the steps necessary to get a borderless square plot of a spectrogram. . mydpi=150 pix_side=256 . Here is the original sound file for comparison. . plt.figure(figsize=(pix_side/mydpi, pix_side/mydpi)) CQT = librosa.amplitude_to_db(np.abs(librosa.cqt(y, sr=sr)), ref=np.max) librosa.display.specshow(CQT,x_axis=None,y_axis=None) plt.axis(&#39;off&#39;) . (0.0, 87.0, 0.0, 84.0) . And this is the spectrogram of the percussive content in the same format. . plt.figure(figsize=(pix_side/mydpi, pix_side/mydpi)) CQT = librosa.amplitude_to_db(np.abs(librosa.cqt(librosa.istft(D_percussive), sr=sr)), ref=np.max) p=librosa.display.specshow(CQT,x_axis=None,y_axis=None) plt.axis(&#39;off&#39;) . (0.0, 87.0, 0.0, 84.0) . Save the file . p.figure.savefig(&#39;test.png&#39;) . and try opening and displaying it. . from IPython.display import Image Image(filename=&#39;test.png&#39;) . Creating the training dataset . Load each sound file extracted from the videos and generate a spectrogram image of every two seconds of audio. . The soundfile package is used to save out each 2 second slice so that it can be listened to when evaluating the performance of the classifier after training. . !pip install soundfile . Collecting soundfile Downloading https://files.pythonhosted.org/packages/68/64/1191352221e2ec90db7492b4bf0c04fd9d2508de67b3f39cbf093cd6bd86/SoundFile-0.10.2-py2.py3-none-any.whl Requirement already satisfied: cffi&gt;=1.0 in /usr/local/lib/python3.6/dist-packages (from soundfile) (1.12.3) Requirement already satisfied: pycparser in /usr/local/lib/python3.6/dist-packages (from cffi&gt;=1.0-&gt;soundfile) (2.19) Installing collected packages: soundfile Successfully installed soundfile-0.10.2 . First a class to represent the spectrogram. The idea was to give it functions for each step in the process detailed above and call them in a loop. But this was determined to be the concern of a future refactoring. Now the class is a bit redundant, a function would have sufficed. . class Spectrogram: def __init__(self, audiofile_path, dpi=150, side_px=256, total_duration=10, duration=2): import numpy as np import matplotlib.pyplot as plt import librosa import librosa.display import os import soundfile as sf filepath, extension = os.path.splitext(audiofile_path) slices = int(total_duration / duration) for i in range(slices): spectrogram_path = filepath + &#39;_&#39; + str(i) + &#39;.png&#39; audio_slice_path = filepath + &#39;_&#39; + str(i) + &#39;.wav&#39; y, sr = librosa.load(audiofile_path, duration=duration, offset=duration*i) sf.write(audio_slice_path,y,sr) D = librosa.stft(y) D_harmonic, D_percussive = librosa.decompose.hpss(D) # Pre-compute a global reference power from the input spectrum rp = np.max(np.abs(D)) plt.figure(figsize=(side_px/dpi, side_px/dpi)) CQT = librosa.amplitude_to_db(np.abs(librosa.cqt(librosa.istft(D_percussive), sr=sr)), ref=np.max) p=librosa.display.specshow(CQT,x_axis=None,y_axis=None) plt.axis(&#39;off&#39;) figure = p.figure figure.savefig(spectrogram_path) plt.close(figure) . The actual batch job is run by these nested for loops. . import os dirs = [base_dir+&#39;knocking/&#39;,base_dir+&#39;normal/&#39;] for dirry in dirs: print(dirry) for filename in os.listdir(dirry): if filename.endswith(&#39;.wav&#39;): print(filename) Spectrogram(dirry+filename) . /content/gdrive/My Drive/Colab Notebooks/fast.ai/KnockKnock/data/knocking/ 0005.wav 0004.wav 0010.wav 0003.wav 0011.wav 0002.wav 0009.wav 0006.wav 0007.wav 0008.wav 0013.wav 0014.wav 0012.wav 0020.wav 0021.wav 0016.wav 0015.wav 0017.wav 0018.wav 0019.wav 0022.wav 0029.wav 0030.wav 0027.wav 0031.wav 0028.wav 0026.wav 0023.wav 0024.wav 0025.wav 0037.wav 0033.wav 0035.wav 0040.wav 0034.wav 0036.wav 0042.wav 0032.wav 0039.wav 0041.wav 0044.wav 0045.wav 0001.wav 0043.wav 0046.wav /content/gdrive/My Drive/Colab Notebooks/fast.ai/KnockKnock/data/normal/ 0004.wav 0012.wav 0011.wav 0010.wav 0007.wav 0009.wav 0013.wav 0008.wav 0006.wav 0005.wav 0023.wav 0021.wav 0019.wav 0022.wav 0014.wav 0020.wav 0017.wav 0016.wav 0018.wav 0015.wav 0029.wav 0027.wav 0026.wav 0032.wav 0030.wav 0028.wav 0024.wav 0031.wav 0033.wav 0025.wav 0034.wav 0043.wav 0036.wav 0042.wav 0039.wav 0041.wav 0037.wav 0035.wav 0038.wav 0040.wav 0003.wav 0046.wav 0002.wav 0001.wav 0044.wav 0045.wav 0047.wav . .",
            "url": "https://niklasekman.github.io/my_fastpages/2019/09/14/Create_spectrogram_commented.html",
            "relUrl": "/2019/09/14/Create_spectrogram_commented.html",
            "date": " • Sep 14, 2019"
        }
        
    
  
    
        ,"post5": {
            "title": "Engine knock detection AI part 1/5",
            "content": "Background . The inspiration for this project comes from the presentation of fast.ai course alumni projects by Jeremy Howard in some of the first lessons of the third installment of Practical Deep Learning for Coders where training an image classifier using spectrograms to identify sounds is mentioned. . What this means in simpler terms is that an image classifying algorithm is presented with a series of pictures labeled with which class or case they represent. Each picture represents what that sound looks like if one were to plot the sound intensities at different frequencies as a function of time. . Method . A set of recordings of both knocking and healthy sounding engines has first to be aquired in order to create a training set of spectrograms. I&#39;ve chosen to create two playlists on youtube of videos specifically depicting car engines, one for each case. I made sure to just include petrol engines since my suspicion was that the sound of a diesel engine might throw things off. . As a non car mechanic I made that assumption based on the idea that if I could distinguish a well running engine from a knocking one then the resulting model could do it too. I found that I had some trouble making the distinction with some of the cold started diesels I listened to. . Downloading audio files . After creating the playlists Google Drive is mounted to store the intermediary sound files. . from google.colab import drive drive.mount(&#39;/content/drive&#39;) . Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&amp;redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&amp;scope=email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdocs.test%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.photos.readonly%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fpeopleapi.readonly&amp;response_type=code Enter your authorization code: ·········· Mounted at /content/drive . . The youtube-dl python package is installed and the soundtrack from each of the videos is downloaded. . !pip install --upgrade youtube-dl . Collecting youtube-dl Downloading https://files.pythonhosted.org/packages/42/9c/9e13d8c2cb43dc158ede19e5dade9037fa5ee321e70494a3960d62f9242b/youtube_dl-2019.9.12.1-py2.py3-none-any.whl (1.8MB) |████████████████████████████████| 1.8MB 2.8MB/s Installing collected packages: youtube-dl Successfully installed youtube-dl-2019.9.12.1 . import youtube_dl . ydl = youtube_dl.YoutubeDL({&#39;outtmpl&#39;: &#39;%(id)s%(ext)s&#39;}) ydl_opts = { &#39;format&#39;: &#39;bestaudio/best&#39;, &#39;postprocessors&#39;: [{ &#39;key&#39;: &#39;FFmpegExtractAudio&#39;, &#39;preferredcodec&#39;: &#39;mp3&#39;, &#39;preferredquality&#39;: &#39;192&#39;, }], } with youtube_dl.YoutubeDL(ydl_opts) as ydl: ydl.download([&#39;https://www.youtube.com/playlist?list=PL9R1Zswn-XPCh3A3bV9Vnf7ui9YCZWo9w&#39;]) . [youtube:playlist] PL9R1Zswn-XPCh3A3bV9Vnf7ui9YCZWo9w: Downloading webpage [download] Downloading playlist: engine_normal [youtube:playlist] playlist engine_normal: Downloading 15 videos [download] Downloading video 1 of 15 [youtube] ho38ZYkQJxs: Downloading webpage [youtube] ho38ZYkQJxs: Downloading video info webpage [download] Destination: 2003 toyota corolla engine sound-ho38ZYkQJxs.webm [download] 100% of 2.44MiB in 00:00 [ffmpeg] Destination: 2003 toyota corolla engine sound-ho38ZYkQJxs.mp3 Deleting original file 2003 toyota corolla engine sound-ho38ZYkQJxs.webm (pass -k to keep) [download] Downloading video 2 of 15 [youtube] Eky3PMh76gY: Downloading webpage [youtube] Eky3PMh76gY: Downloading video info webpage [youtube] Eky3PMh76gY: Downloading MPD manifest [dashsegments] Total fragments: 8 [download] Destination: 2017 Hyundai Elantra SE 2.0L 4 Cylinder - Normal Engine Running Noises-Eky3PMh76gY.webm [download] 100% of 1.04MiB in 00:02 [ffmpeg] Destination: 2017 Hyundai Elantra SE 2.0L 4 Cylinder - Normal Engine Running Noises-Eky3PMh76gY.mp3 Deleting original file 2017 Hyundai Elantra SE 2.0L 4 Cylinder - Normal Engine Running Noises-Eky3PMh76gY.webm (pass -k to keep) [download] Downloading video 3 of 15 [youtube] YiwsC_UlDFY: Downloading webpage [youtube] YiwsC_UlDFY: Downloading video info webpage [youtube] YiwsC_UlDFY: Downloading MPD manifest [dashsegments] Total fragments: 3 [download] Destination: Nissan Frontier 4L v6 engine sound idle-YiwsC_UlDFY.webm [download] 100% of 195.58KiB in 00:01 [ffmpeg] Destination: Nissan Frontier 4L v6 engine sound idle-YiwsC_UlDFY.mp3 Deleting original file Nissan Frontier 4L v6 engine sound idle-YiwsC_UlDFY.webm (pass -k to keep) [download] Downloading video 4 of 15 [youtube] uumxLAHbDsE: Downloading webpage [youtube] uumxLAHbDsE: Downloading video info webpage [download] Destination: Volvo S60 2.0T - Normal engine sound-uumxLAHbDsE.webm [download] 100% of 428.44KiB in 00:00 [ffmpeg] Destination: Volvo S60 2.0T - Normal engine sound-uumxLAHbDsE.mp3 Deleting original file Volvo S60 2.0T - Normal engine sound-uumxLAHbDsE.webm (pass -k to keep) [download] Downloading video 5 of 15 [youtube] 8cXmy_U0_28: Downloading webpage [youtube] 8cXmy_U0_28: Downloading video info webpage [download] Destination: Mini R56S normal engine sound-8cXmy_U0_28.webm [download] 100% of 526.86KiB in 00:00 [ffmpeg] Destination: Mini R56S normal engine sound-8cXmy_U0_28.mp3 Deleting original file Mini R56S normal engine sound-8cXmy_U0_28.webm (pass -k to keep) [download] Downloading video 6 of 15 [youtube] nGQcC7giMkU: Downloading webpage [youtube] nGQcC7giMkU: Downloading video info webpage [download] Destination: 2016 Kia Rio 1.6L V4 Engine - Normal Running Noises _ Sounds-nGQcC7giMkU.m4a [download] 100% of 1.05MiB in 00:00 [ffmpeg] Correcting container in &#34;2016 Kia Rio 1.6L V4 Engine - Normal Running Noises _ Sounds-nGQcC7giMkU.m4a&#34; [ffmpeg] Destination: 2016 Kia Rio 1.6L V4 Engine - Normal Running Noises _ Sounds-nGQcC7giMkU.mp3 Deleting original file 2016 Kia Rio 1.6L V4 Engine - Normal Running Noises _ Sounds-nGQcC7giMkU.m4a (pass -k to keep) [download] Downloading video 7 of 15 [youtube] 2EQcfJAU7IM: Downloading webpage [youtube] 2EQcfJAU7IM: Downloading video info webpage [youtube] 2EQcfJAU7IM: Downloading MPD manifest [dashsegments] Total fragments: 8 [download] Destination: 2017 Kia Rio 1.6L 4 Cylinder GDI Engine - Normal Engine Sounds-2EQcfJAU7IM.webm [download] 100% of 1.02MiB in 00:02 [ffmpeg] Destination: 2017 Kia Rio 1.6L 4 Cylinder GDI Engine - Normal Engine Sounds-2EQcfJAU7IM.mp3 Deleting original file 2017 Kia Rio 1.6L 4 Cylinder GDI Engine - Normal Engine Sounds-2EQcfJAU7IM.webm (pass -k to keep) [download] Downloading video 8 of 15 [youtube] PRO0HgD9qx4: Downloading webpage [youtube] PRO0HgD9qx4: Downloading video info webpage [youtube] PRO0HgD9qx4: Downloading MPD manifest [dashsegments] Total fragments: 14 [download] Destination: 2017 Nissan Versa Note - Normal Engine Running Noises - 1.6L Engine-PRO0HgD9qx4.m4a [download] 100% of 949.79KiB in 00:01 [ffmpeg] Correcting container in &#34;2017 Nissan Versa Note - Normal Engine Running Noises - 1.6L Engine-PRO0HgD9qx4.m4a&#34; [ffmpeg] Destination: 2017 Nissan Versa Note - Normal Engine Running Noises - 1.6L Engine-PRO0HgD9qx4.mp3 Deleting original file 2017 Nissan Versa Note - Normal Engine Running Noises - 1.6L Engine-PRO0HgD9qx4.m4a (pass -k to keep) [download] Downloading video 9 of 15 [youtube] 6GPgodkLSkQ: Downloading webpage [youtube] 6GPgodkLSkQ: Downloading video info webpage [download] Destination: Listen Toyota 2.4 VVT-i engine sound, when engine is very OK. Years 2002 to 2015-6GPgodkLSkQ.webm [download] 100% of 1.93MiB in 00:00 [ffmpeg] Destination: Listen Toyota 2.4 VVT-i engine sound, when engine is very OK. Years 2002 to 2015-6GPgodkLSkQ.mp3 Deleting original file Listen Toyota 2.4 VVT-i engine sound, when engine is very OK. Years 2002 to 2015-6GPgodkLSkQ.webm (pass -k to keep) [download] Downloading video 10 of 15 [youtube] pLmX2ws7znE: Downloading webpage [youtube] pLmX2ws7znE: Downloading video info webpage [youtube] pLmX2ws7znE: Downloading MPD manifest [dashsegments] Total fragments: 4 [download] Destination: 2018 Hyundai Tucson 2.0 GDI Nu Engine Sound Normal-pLmX2ws7znE.m4a [download] 100% of 451.64KiB in 00:00 [ffmpeg] Correcting container in &#34;2018 Hyundai Tucson 2.0 GDI Nu Engine Sound Normal-pLmX2ws7znE.m4a&#34; [ffmpeg] Destination: 2018 Hyundai Tucson 2.0 GDI Nu Engine Sound Normal-pLmX2ws7znE.mp3 Deleting original file 2018 Hyundai Tucson 2.0 GDI Nu Engine Sound Normal-pLmX2ws7znE.m4a (pass -k to keep) [download] Downloading video 11 of 15 [youtube] mOFcfwLTNkY: Downloading webpage [youtube] mOFcfwLTNkY: Downloading video info webpage [download] Destination: 3.2 fsi engine sound cold (normal or not)-mOFcfwLTNkY.m4a [download] 100% of 928.43KiB in 00:00 [ffmpeg] Correcting container in &#34;3.2 fsi engine sound cold (normal or not)-mOFcfwLTNkY.m4a&#34; [ffmpeg] Destination: 3.2 fsi engine sound cold (normal or not)-mOFcfwLTNkY.mp3 Deleting original file 3.2 fsi engine sound cold (normal or not)-mOFcfwLTNkY.m4a (pass -k to keep) [download] Downloading video 12 of 15 [youtube] 5q1uATQu8zg: Downloading webpage [youtube] 5q1uATQu8zg: Downloading video info webpage [youtube] 5q1uATQu8zg: Downloading MPD manifest [dashsegments] Total fragments: 13 [download] Destination: Normal Engine Idle Sound Cold &amp; Warm - 2006 Nissan Sentra-5q1uATQu8zg.webm [download] 100% of 1.86MiB in 00:07 [ffmpeg] Destination: Normal Engine Idle Sound Cold &amp; Warm - 2006 Nissan Sentra-5q1uATQu8zg.mp3 Deleting original file Normal Engine Idle Sound Cold &amp; Warm - 2006 Nissan Sentra-5q1uATQu8zg.webm (pass -k to keep) [download] Downloading video 13 of 15 [youtube] 8BOtWY3RobA: Downloading webpage [youtube] 8BOtWY3RobA: Downloading video info webpage [download] Destination: 1996 Subaru Outback, Normal Engine Sound-8BOtWY3RobA.webm [download] 100% of 956.87KiB in 00:00 [ffmpeg] Destination: 1996 Subaru Outback, Normal Engine Sound-8BOtWY3RobA.mp3 Deleting original file 1996 Subaru Outback, Normal Engine Sound-8BOtWY3RobA.webm (pass -k to keep) [download] Downloading video 14 of 15 [youtube] bkPtY1pW82Y: Downloading webpage [youtube] bkPtY1pW82Y: Downloading video info webpage [youtube] bkPtY1pW82Y: Downloading MPD manifest [dashsegments] Total fragments: 15 [download] Destination: Bmw f30 Noisy Engine Sound-bkPtY1pW82Y.m4a [download] 100% of 1.01MiB in 00:01 [ffmpeg] Correcting container in &#34;Bmw f30 Noisy Engine Sound-bkPtY1pW82Y.m4a&#34; [ffmpeg] Destination: Bmw f30 Noisy Engine Sound-bkPtY1pW82Y.mp3 Deleting original file Bmw f30 Noisy Engine Sound-bkPtY1pW82Y.m4a (pass -k to keep) [download] Downloading video 15 of 15 [youtube] nSB65kClSXM: Downloading webpage [youtube] nSB65kClSXM: Downloading video info webpage [youtube] nSB65kClSXM: Downloading MPD manifest [dashsegments] Total fragments: 4 [download] Destination: 2016-2018 Toyota Tacoma Loud Engine sound is Normal-nSB65kClSXM.webm [download] 100% of 382.73KiB in 00:01 [ffmpeg] Destination: 2016-2018 Toyota Tacoma Loud Engine sound is Normal-nSB65kClSXM.mp3 Deleting original file 2016-2018 Toyota Tacoma Loud Engine sound is Normal-nSB65kClSXM.webm (pass -k to keep) [download] Finished downloading playlist: engine_normal . . !rm -rf ./sample_data . Checking to see that all the expected files are present. . !ls *.mp3 . &#39;1996 Subaru Outback, Normal Engine Sound-8BOtWY3RobA.mp3&#39; &#39;2003 toyota corolla engine sound-ho38ZYkQJxs.mp3&#39; &#39;2016-2018 Toyota Tacoma Loud Engine sound is Normal-nSB65kClSXM.mp3&#39; &#39;2016 Kia Rio 1.6L V4 Engine - Normal Running Noises _ Sounds-nGQcC7giMkU.mp3&#39; &#39;2017 Hyundai Elantra SE 2.0L 4 Cylinder - Normal Engine Running Noises-Eky3PMh76gY.mp3&#39; &#39;2017 Kia Rio 1.6L 4 Cylinder GDI Engine - Normal Engine Sounds-2EQcfJAU7IM.mp3&#39; &#39;2017 Nissan Versa Note - Normal Engine Running Noises - 1.6L Engine-PRO0HgD9qx4.mp3&#39; &#39;2018 Hyundai Tucson 2.0 GDI Nu Engine Sound Normal-pLmX2ws7znE.mp3&#39; &#39;3.2 fsi engine sound cold (normal or not)-mOFcfwLTNkY.mp3&#39; &#39;Bmw f30 Noisy Engine Sound-bkPtY1pW82Y.mp3&#39; &#39;Listen Toyota 2.4 VVT-i engine sound, when engine is very OK. Years 2002 to 2015-6GPgodkLSkQ.mp3&#39; &#39;Mini R56S normal engine sound-8cXmy_U0_28.mp3&#39; &#39;Nissan Frontier 4L v6 engine sound idle-YiwsC_UlDFY.mp3&#39; &#39;Normal Engine Idle Sound Cold &amp; Warm - 2006 Nissan Sentra-5q1uATQu8zg.mp3&#39; &#39;Volvo S60 2.0T - Normal engine sound-uumxLAHbDsE.mp3&#39; . Moving the sound files from the Colab instance to a folder on Google Drive. . !mv *.mp3 /content/drive/My Drive/Colab Notebooks/fast.ai/KnockKnock/data/normal/ . Rinse and repeat for the other playlist. . ydl_opts = { &#39;format&#39;: &#39;bestaudio/best&#39;, &#39;postprocessors&#39;: [{ &#39;key&#39;: &#39;FFmpegExtractAudio&#39;, &#39;preferredcodec&#39;: &#39;mp3&#39;, &#39;preferredquality&#39;: &#39;192&#39;, }], } with youtube_dl.YoutubeDL(ydl_opts) as ydl: ydl.download([&#39;https://www.youtube.com/playlist?list=PL9R1Zswn-XPCnpyXQLRPYVJr4BXJUYie8&#39;]) . [youtube:playlist] PL9R1Zswn-XPCnpyXQLRPYVJr4BXJUYie8: Downloading webpage [download] Downloading playlist: engine_knocking [youtube:playlist] playlist engine_knocking: Downloading 15 videos [download] Downloading video 1 of 15 [youtube] JIOdS7XbHys: Downloading webpage [youtube] JIOdS7XbHys: Downloading video info webpage [download] Destination: How To Diagnose An Engine Knock.MP4-JIOdS7XbHys.webm [download] 100% of 3.87MiB in 00:00 [ffmpeg] Destination: How To Diagnose An Engine Knock.MP4-JIOdS7XbHys.mp3 Deleting original file How To Diagnose An Engine Knock.MP4-JIOdS7XbHys.webm (pass -k to keep) [download] Downloading video 2 of 15 [youtube] gBA1zC5duuI: Downloading webpage [youtube] gBA1zC5duuI: Downloading video info webpage [download] Destination: Engine Noise Diagnosis-Part 1-gBA1zC5duuI.webm [download] 100% of 17.50MiB in 00:00 [ffmpeg] Destination: Engine Noise Diagnosis-Part 1-gBA1zC5duuI.mp3 Deleting original file Engine Noise Diagnosis-Part 1-gBA1zC5duuI.webm (pass -k to keep) [download] Downloading video 3 of 15 [youtube] TjtNcBD4Uwk: Downloading webpage [youtube] TjtNcBD4Uwk: Downloading video info webpage [download] Destination: Engine Noise Diagnosis Part 2- The Answer Revealed!-TjtNcBD4Uwk.webm [download] 100% of 8.50MiB in 00:00 [ffmpeg] Destination: Engine Noise Diagnosis Part 2- The Answer Revealed!-TjtNcBD4Uwk.mp3 Deleting original file Engine Noise Diagnosis Part 2- The Answer Revealed!-TjtNcBD4Uwk.webm (pass -k to keep) [download] Downloading video 4 of 15 [youtube] wf8e_Ivi72Q: Downloading webpage [youtube] wf8e_Ivi72Q: Downloading video info webpage [download] Destination: Engine Knock Diagnosis-wf8e_Ivi72Q.webm [download] 100% of 2.43MiB in 00:00 [ffmpeg] Destination: Engine Knock Diagnosis-wf8e_Ivi72Q.mp3 Deleting original file Engine Knock Diagnosis-wf8e_Ivi72Q.webm (pass -k to keep) [download] Downloading video 5 of 15 [youtube] kBWXxWD7g30: Downloading webpage [youtube] kBWXxWD7g30: Downloading video info webpage [download] Destination: Engine knocking sounds-kBWXxWD7g30.webm [download] 100% of 571.70KiB in 00:00 [ffmpeg] Destination: Engine knocking sounds-kBWXxWD7g30.mp3 Deleting original file Engine knocking sounds-kBWXxWD7g30.webm (pass -k to keep) [download] Downloading video 6 of 15 [youtube] IRcZo89RJzI: Downloading webpage [youtube] IRcZo89RJzI: Downloading video info webpage [youtube] IRcZo89RJzI: Downloading MPD manifest [dashsegments] Total fragments: 39 [download] Destination: Ticking or Knocking Engine-IRcZo89RJzI.m4a [download] 100% of 2.83MiB in 00:03 [ffmpeg] Correcting container in &#34;Ticking or Knocking Engine-IRcZo89RJzI.m4a&#34; [ffmpeg] Destination: Ticking or Knocking Engine-IRcZo89RJzI.mp3 Deleting original file Ticking or Knocking Engine-IRcZo89RJzI.m4a (pass -k to keep) [download] Downloading video 7 of 15 [youtube] Zh8e9MGam8Q: Downloading webpage [youtube] Zh8e9MGam8Q: Downloading video info webpage [download] Destination: Engine Knocking-Zh8e9MGam8Q.m4a [download] 100% of 1.01MiB in 00:00 [ffmpeg] Correcting container in &#34;Engine Knocking-Zh8e9MGam8Q.m4a&#34; [ffmpeg] Destination: Engine Knocking-Zh8e9MGam8Q.mp3 Deleting original file Engine Knocking-Zh8e9MGam8Q.m4a (pass -k to keep) [download] Downloading video 8 of 15 [youtube] lGC51mIQylk: Downloading webpage [youtube] lGC51mIQylk: Downloading video info webpage [download] Destination: What Does Detonation _ Spark Knock Sound Like-lGC51mIQylk.m4a [download] 100% of 2.04MiB in 00:00 [ffmpeg] Correcting container in &#34;What Does Detonation _ Spark Knock Sound Like-lGC51mIQylk.m4a&#34; [ffmpeg] Destination: What Does Detonation _ Spark Knock Sound Like-lGC51mIQylk.mp3 Deleting original file What Does Detonation _ Spark Knock Sound Like-lGC51mIQylk.m4a (pass -k to keep) [download] Downloading video 9 of 15 [youtube] rk_iOIumShQ: Downloading webpage [youtube] rk_iOIumShQ: Downloading video info webpage [download] Destination: Engine knocking sound-rk_iOIumShQ.m4a [download] 100% of 763.43KiB in 00:00 [ffmpeg] Correcting container in &#34;Engine knocking sound-rk_iOIumShQ.m4a&#34; [ffmpeg] Destination: Engine knocking sound-rk_iOIumShQ.mp3 Deleting original file Engine knocking sound-rk_iOIumShQ.m4a (pass -k to keep) [download] Downloading video 10 of 15 [youtube] n0jys2TEXDk: Downloading webpage [youtube] n0jys2TEXDk: Downloading video info webpage [download] Destination: Ford Vehicle Noises - #4 Tapping Knocking Noise 2.5L Engines-n0jys2TEXDk.webm [download] 100% of 3.72MiB in 00:00 [ffmpeg] Destination: Ford Vehicle Noises - #4 Tapping Knocking Noise 2.5L Engines-n0jys2TEXDk.mp3 Deleting original file Ford Vehicle Noises - #4 Tapping Knocking Noise 2.5L Engines-n0jys2TEXDk.webm (pass -k to keep) [download] Downloading video 11 of 15 [youtube] e79c_-_hVa8: Downloading webpage [youtube] e79c_-_hVa8: Downloading video info webpage [youtube] e79c_-_hVa8: Downloading MPD manifest [dashsegments] Total fragments: 7 [download] Destination: Spun _ Knocking Rod Bearing Noise-e79c_-_hVa8.webm [download] 100% of 1.02MiB in 00:00 [ffmpeg] Destination: Spun _ Knocking Rod Bearing Noise-e79c_-_hVa8.mp3 Deleting original file Spun _ Knocking Rod Bearing Noise-e79c_-_hVa8.webm (pass -k to keep) [download] Downloading video 12 of 15 [youtube] rFuLwzb_VmE: Downloading webpage [youtube] rFuLwzb_VmE: Downloading video info webpage [download] Destination: Spark Knock or engine ping-rFuLwzb_VmE.m4a [download] 100% of 365.87KiB in 00:00 [ffmpeg] Correcting container in &#34;Spark Knock or engine ping-rFuLwzb_VmE.m4a&#34; [ffmpeg] Destination: Spark Knock or engine ping-rFuLwzb_VmE.mp3 Deleting original file Spark Knock or engine ping-rFuLwzb_VmE.m4a (pass -k to keep) [download] Downloading video 13 of 15 [youtube] wmtBqNnnvrs: Downloading webpage [youtube] wmtBqNnnvrs: Downloading video info webpage [youtube] wmtBqNnnvrs: Downloading MPD manifest [dashsegments] Total fragments: 20 [download] Destination: Ever Wonder What Rod Knock Sounds Like-wmtBqNnnvrs.webm [download] 100% of 3.18MiB in 00:05 [ffmpeg] Destination: Ever Wonder What Rod Knock Sounds Like-wmtBqNnnvrs.mp3 Deleting original file Ever Wonder What Rod Knock Sounds Like-wmtBqNnnvrs.webm (pass -k to keep) [download] Downloading video 14 of 15 [youtube] 8EZEwMqJj1U: Downloading webpage [youtube] 8EZEwMqJj1U: Downloading video info webpage [download] Destination: Engine knocking_Pinging sound at idle...-8EZEwMqJj1U.webm [download] 100% of 1.35MiB in 00:00 [ffmpeg] Destination: Engine knocking_Pinging sound at idle...-8EZEwMqJj1U.mp3 Deleting original file Engine knocking_Pinging sound at idle...-8EZEwMqJj1U.webm (pass -k to keep) [download] Downloading video 15 of 15 [youtube] uRtyPbyomxQ: Downloading webpage [youtube] uRtyPbyomxQ: Downloading video info webpage [download] Destination: HYUNDAI ELANTRA ENGINE KNOCK TICKING NOISE-uRtyPbyomxQ.webm [download] 100% of 5.25MiB in 00:00 [ffmpeg] Destination: HYUNDAI ELANTRA ENGINE KNOCK TICKING NOISE-uRtyPbyomxQ.mp3 Deleting original file HYUNDAI ELANTRA ENGINE KNOCK TICKING NOISE-uRtyPbyomxQ.webm (pass -k to keep) [download] Finished downloading playlist: engine_knocking . . !mv *.mp3 /content/drive/My Drive/Colab Notebooks/fast.ai/KnockKnock/data/knocking/ . Slicing audio files . The 15 mp3 files were then sliced into 10 second clips in Audacity. This could probably have been done programmatically but as trivial as the task initally may sound there would most likely have been complications. The videos do not only show the car running with the hood popped up. There&#39;s some talking, explaining and fumbling around in quite a few of them. .",
            "url": "https://niklasekman.github.io/my_fastpages/2019/09/13/youtube-dl_commented.html",
            "relUrl": "/2019/09/13/youtube-dl_commented.html",
            "date": " • Sep 13, 2019"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I’m a Marine electrician with a software design background currently studying for a Bachelor of Engineering in Electrical Engineering. .",
          "url": "https://niklasekman.github.io/my_fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://niklasekman.github.io/my_fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}