{
  
    
        "post0": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://niklasekman.github.io/my_fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://niklasekman.github.io/my_fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Engine knock detection AI part 2/4",
            "content": "Summary . After the videos were sliced up and the audio tracks saved as wave files in the first part the magnificent librosa library is now used for pre-processing and generating spectrogram images to be used as training data. . Setup . Basics . First things first. Since this ran on Google Colab and the audio files are in a Drive folder, Google Drive is first mounted. . from google.colab import drive drive.mount(&#39;/content/gdrive&#39;, force_remount=True) root_dir = &quot;/content/gdrive/My Drive/&quot; base_dir = root_dir + &#39;Colab Notebooks/fast.ai/KnockKnock/data/&#39; # /content/gdrive/My Drive/Colab Notebooks/fast.ai/data/ . . Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&amp;redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&amp;scope=email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdocs.test%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.photos.readonly%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fpeopleapi.readonly&amp;response_type=code Enter your authorization code: ·········· Mounted at /content/gdrive . Importing the needed modules. Librosa is used for spectral decomposition. . from __future__ import print_function import numpy as np import matplotlib.pyplot as plt import librosa import librosa.display import IPython.display as ipd . Selecting an audiofile to experiment on. . audiofile_path = base_dir+&#39;knocking/0005.wav&#39; . Loading the audiofile . Load two seconds of audio from the specified file. The load function returns both the data, y, and information on the sample rate, sr. . y, sr = librosa.load(audiofile_path, duration=2, offset=0) . Pre-processing audio . Calculate the Short-time Fourier transform using the stft function and perform Median-filtering harmonic percussive source separation with the decompose.hpss function. . Sounds real fancy but the gist of it is that the latter function attempts to split the audio into harmonic and percussive elements. As the sound one is listening for when determining if an engine is knocking is more of a percussive or transient kind, this will make it easier to train the classifier model. . D = librosa.stft(y) D_harmonic, D_percussive = librosa.decompose.hpss(D) . Examining results . Plot the spectrograms of the original, harmonic and percussive content. Even though the knocking is visible in the full spectrogram it is a lot clearer in the percussive one. . # Pre-compute a global reference power from the input spectrum rp = np.max(np.abs(D)) plt.figure(figsize=(12, 8)) plt.subplot(3, 1, 1) librosa.display.specshow(librosa.amplitude_to_db(np.abs(D), ref=rp), y_axis=&#39;log&#39;) plt.colorbar() plt.title(&#39;Full spectrogram&#39;) plt.subplot(3, 1, 2) librosa.display.specshow(librosa.amplitude_to_db(np.abs(D_harmonic), ref=rp), y_axis=&#39;log&#39;) plt.colorbar() plt.title(&#39;Harmonic spectrogram&#39;) plt.subplot(3, 1, 3) librosa.display.specshow(librosa.amplitude_to_db(np.abs(D_percussive), ref=rp), y_axis=&#39;log&#39;, x_axis=&#39;time&#39;) plt.colorbar() plt.title(&#39;Percussive spectrogram&#39;) plt.tight_layout() . . It is possible to run an inverse fourier tranform on the harmonic and percussive content in order to hear the difference. . First up is the original sound. . ipd.Audio(y,rate=sr) . Your browser does not support the audio element. Next is the harmonic content. . ipd.Audio(librosa.istft(D_harmonic),rate=sr) . Your browser does not support the audio element. And lastly the percussive. The knocking is quite pronounced. . ipd.Audio(librosa.istft(D_percussive),rate=sr) . Your browser does not support the audio element. Preparing plots for output . The images used to train a classifier should ideally be square and relatively small. The following documents the steps necessary to get a borderless square plot of a spectrogram. . mydpi=150 pix_side=256 . Here is the original sound file for comparison. . plt.figure(figsize=(pix_side/mydpi, pix_side/mydpi)) CQT = librosa.amplitude_to_db(np.abs(librosa.cqt(y, sr=sr)), ref=np.max) librosa.display.specshow(CQT,x_axis=None,y_axis=None) plt.axis(&#39;off&#39;) . (0.0, 87.0, 0.0, 84.0) . And this is the spectrogram of the percussive content in the same format. . plt.figure(figsize=(pix_side/mydpi, pix_side/mydpi)) CQT = librosa.amplitude_to_db(np.abs(librosa.cqt(librosa.istft(D_percussive), sr=sr)), ref=np.max) p=librosa.display.specshow(CQT,x_axis=None,y_axis=None) plt.axis(&#39;off&#39;) . (0.0, 87.0, 0.0, 84.0) . Save the file . p.figure.savefig(&#39;test.png&#39;) . and try opening and displaying it. . from IPython.display import Image Image(filename=&#39;test.png&#39;) . Creating the training dataset . Load each sound file extracted from the videos and generate a spectrogram image of every two seconds of audio. . The soundfile package is used to save out each 2 second slice so that it can be listened to when evaluating the performance of the classifier after training. . !pip install soundfile . Collecting soundfile Downloading https://files.pythonhosted.org/packages/68/64/1191352221e2ec90db7492b4bf0c04fd9d2508de67b3f39cbf093cd6bd86/SoundFile-0.10.2-py2.py3-none-any.whl Requirement already satisfied: cffi&gt;=1.0 in /usr/local/lib/python3.6/dist-packages (from soundfile) (1.12.3) Requirement already satisfied: pycparser in /usr/local/lib/python3.6/dist-packages (from cffi&gt;=1.0-&gt;soundfile) (2.19) Installing collected packages: soundfile Successfully installed soundfile-0.10.2 . First a class to represent the spectrogram. The idea was to give it functions for each step in the process detailed above and call them in a loop. But this was determined to be the concern of a future refactoring. Now the class is a bit redundant, a function would have sufficed. . class Spectrogram: def __init__(self, audiofile_path, dpi=150, side_px=256, total_duration=10, duration=2): import numpy as np import matplotlib.pyplot as plt import librosa import librosa.display import os import soundfile as sf filepath, extension = os.path.splitext(audiofile_path) slices = int(total_duration / duration) for i in range(slices): spectrogram_path = filepath + &#39;_&#39; + str(i) + &#39;.png&#39; audio_slice_path = filepath + &#39;_&#39; + str(i) + &#39;.wav&#39; y, sr = librosa.load(audiofile_path, duration=duration, offset=duration*i) sf.write(audio_slice_path,y,sr) D = librosa.stft(y) D_harmonic, D_percussive = librosa.decompose.hpss(D) # Pre-compute a global reference power from the input spectrum rp = np.max(np.abs(D)) plt.figure(figsize=(side_px/dpi, side_px/dpi)) CQT = librosa.amplitude_to_db(np.abs(librosa.cqt(librosa.istft(D_percussive), sr=sr)), ref=np.max) p=librosa.display.specshow(CQT,x_axis=None,y_axis=None) plt.axis(&#39;off&#39;) figure = p.figure figure.savefig(spectrogram_path) plt.close(figure) . The actual batch job is run by these nested for loops. . import os dirs = [base_dir+&#39;knocking/&#39;,base_dir+&#39;normal/&#39;] for dirry in dirs: print(dirry) for filename in os.listdir(dirry): if filename.endswith(&#39;.wav&#39;): print(filename) Spectrogram(dirry+filename) . /content/gdrive/My Drive/Colab Notebooks/fast.ai/KnockKnock/data/knocking/ 0005.wav 0004.wav 0010.wav 0003.wav 0011.wav 0002.wav 0009.wav 0006.wav 0007.wav 0008.wav 0013.wav 0014.wav 0012.wav 0020.wav 0021.wav 0016.wav 0015.wav 0017.wav 0018.wav 0019.wav 0022.wav 0029.wav 0030.wav 0027.wav 0031.wav 0028.wav 0026.wav 0023.wav 0024.wav 0025.wav 0037.wav 0033.wav 0035.wav 0040.wav 0034.wav 0036.wav 0042.wav 0032.wav 0039.wav 0041.wav 0044.wav 0045.wav 0001.wav 0043.wav 0046.wav /content/gdrive/My Drive/Colab Notebooks/fast.ai/KnockKnock/data/normal/ 0004.wav 0012.wav 0011.wav 0010.wav 0007.wav 0009.wav 0013.wav 0008.wav 0006.wav 0005.wav 0023.wav 0021.wav 0019.wav 0022.wav 0014.wav 0020.wav 0017.wav 0016.wav 0018.wav 0015.wav 0029.wav 0027.wav 0026.wav 0032.wav 0030.wav 0028.wav 0024.wav 0031.wav 0033.wav 0025.wav 0034.wav 0043.wav 0036.wav 0042.wav 0039.wav 0041.wav 0037.wav 0035.wav 0038.wav 0040.wav 0003.wav 0046.wav 0002.wav 0001.wav 0044.wav 0045.wav 0047.wav .",
            "url": "https://niklasekman.github.io/my_fastpages/2019/09/15/Create_spectrogram.html",
            "relUrl": "/2019/09/15/Create_spectrogram.html",
            "date": " • Sep 15, 2019"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://niklasekman.github.io/my_fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://niklasekman.github.io/my_fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}